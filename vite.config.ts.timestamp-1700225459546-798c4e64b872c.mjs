// vite.config.ts
import { defineConfig, loadEnv } from "file:///home/lab/Documents/vue-blood-donation/node_modules/vite/dist/node/index.js";
import vue from "file:///home/lab/Documents/vue-blood-donation/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import * as path2 from "path";
import ssr from "file:///home/lab/Documents/vue-blood-donation/node_modules/vike/dist/esm/node/plugin/index.js";
import vuetify from "file:///home/lab/Documents/vue-blood-donation/node_modules/vite-plugin-vuetify/dist/index.js";
import { vavite } from "file:///home/lab/Documents/vue-blood-donation/node_modules/vavite/dist/index.js";
import { compression } from "file:///home/lab/Documents/vue-blood-donation/node_modules/vite-plugin-compression2/dist/index.mjs";
import vueI18nPlugin from "file:///home/lab/Documents/vue-blood-donation/node_modules/@intlify/unplugin-vue-i18n/lib/vite.mjs";
import sitemap from "file:///home/lab/Documents/vue-blood-donation/node_modules/vite-plugin-sitemap/dist/index.js";

// api/index.ts
import fs from "fs/promises";
import * as path from "path";

// api/mada.ts
var mada_default = () => new Request("https://www.mdais.org/umbraco/api/invoker/execute", {
  "headers": {
    "accept": "application/json, text/plain, */*",
    "accept-language": "he",
    "content-type": "application/json",
    "sec-ch-ua": '"Chromium";v="112", "Google Chrome";v="112", "Not:A-Brand";v="99"',
    "dnt": "1",
    "sec-ch-ua-mobile": "?0",
    "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36",
    "origin": "https://www.mdais.org",
    "sec-fetch-site": "same-origin",
    "sec-fetch-mode": "cors",
    "sec-fetch-dest": "empty",
    "referer": "https://www.mdais.org/blood-donation",
    "sec-ch-ua-platform": '"Windows"',
    "sec-gpc": "1",
    "cookie": "GCLB=CK2TyZmj2MaW0gE; rbzid=E5HZdntSNcf13hXTIFC4UsLbpwQ5zyq5xLxCRMohzas/+98rp7oaDL6PA5L2OY3ddSSXbvsvuyvw9hfoXLQRfL9Kv9fX30O/ROQABN+q/78iKgx6BE99Gf/r8RcFvNWyMzXPhV7UCUoqiZqZSAAfPwb0nZ3V5e0oAlIfQQV6ki4gdSZHBJwfflSWtj18X3GilYZ7jJXYFs7vkgFrkm8GolLs0vj9grJxq+sf3AS4jrs=; rbzsessionid=4f2dd1b7808cbafab95244794115c547; _ga=GA1.1.778795905.1681542814; _ga_X02F6V2R9K=GS1.1.1681551465.2.0.1681552979.0.0.0"
  },
  "referrer": "https://www.mdais.org/blood-donation",
  "referrerPolicy": "strict-origin-when-cross-origin",
  "body": '{"RequestHeader":{"Application":101,"Module":"BloodBank","Function":"GetAllDetailsDonations","Token":""},"RequestData":""}',
  "method": "POST",
  "mode": "cors",
  "credentials": "include"
});

// api/index.ts
async function getData() {
  const now = /* @__PURE__ */ new Date();
  const fileName = now.getDate() + "." + (now.getUTCMonth() + 1) + "." + now.getFullYear() + ".json";
  const fileLocation = path.resolve(process.cwd(), "api", "data", fileName);
  let data = await fs.stat(fileLocation).then((stat) => {
    if (stat.isFile()) {
      console.log(`"${fileName}" was found`);
      return fs.readFile(fileLocation, "utf8");
    }
  }).catch((e) => {
    console.log(`File "${fileName}" not found. Fetching new file`);
    return "";
  });
  if (data === "") {
    data = await fetch(mada_default()).then(async (response) => {
      const { Success, Result } = await response.json();
      if (Success) {
        console.log(`Received JSON data. Saving new file "${fileName}"`);
        fs.writeFile(fileLocation, Result, "utf8");
        return Result;
      }
    }).catch((e) => {
      console.error("No data");
    });
  }
  function addId(row, id) {
    return {
      ...row,
      id
    };
  }
  if (data) {
    return JSON.parse(data).map(addId);
  }
  return Promise.reject("No data was fetched");
}

// src/_getData.ts
async function onBeforeRender(pageContext) {
  const rows = await getData().catch((e) => {
    console.error(e);
    return [];
  });
  return {
    pageContext: {
      pageProps: {
        rows
      }
    }
  };
}

// src/i18n/index.ts
import { createI18n } from "file:///home/lab/Documents/vue-blood-donation/node_modules/vue-i18n/dist/vue-i18n.mjs";

// src/i18n/en.json
var en_default = {
  cta: {
    showAll: "All Details"
  },
  location: {
    time: {
      closed: "Closed today",
      openUntill: "Open untill {time}",
      willClose: "Will close {time}",
      willOpen: "Will open {time}"
    }
  },
  meta: {
    description: "Easily search and find place to donate blood in Israel",
    tag: "Find Blood Donation Locations",
    title: "Taramti"
  },
  common: {
    share: "Share",
    moreActions: "More actions"
  },
  donationLocation: {
    openingHours: "Opening Hours"
  },
  settings: {
    locale: {
      en: "English",
      he: "Hebrew"
    }
  }
};

// src/i18n/he.json
var he_default = {
  cta: {
    showAll: "\u05DB\u05DC \u05D4\u05E4\u05E8\u05D8\u05D9\u05DD"
  },
  location: {
    time: {
      closed: "\u05E1\u05D2\u05D5\u05E8 \u05D4\u05D9\u05D5\u05DD",
      openUntill: "\u05E4\u05EA\u05D5\u05D7 \u05E2\u05D3 {time}",
      willClose: "\u05E0\u05E1\u05D2\u05E8 {time}",
      willOpen: "\u05D9\u05E4\u05EA\u05D7 {time}"
    }
  },
  meta: {
    description: "\u05DE\u05E6\u05D0\u05D5 \u05DE\u05E7\u05D5\u05DE\u05D5\u05EA \u05DC\u05EA\u05E8\u05D5\u05DD \u05D1\u05D4\u05DD \u05D3\u05DD \u05D1\u05E7\u05DC\u05D5\u05EA \u05D5\u05D1\u05DE\u05D4\u05D9\u05E8\u05D5\u05EA",
    tag: "\u05DE\u05E6\u05D0\u05D5 \u05DE\u05E7\u05D5\u05DE\u05D5\u05EA \u05DC\u05EA\u05E8\u05D5\u05DD \u05D3\u05DD",
    title: "\u05EA\u05E8\u05DE\u05EA\u05D9"
  },
  common: {
    share: "\u05E9\u05EA\u05E3",
    moreActions: "\u05E4\u05E2\u05D5\u05DC\u05D5\u05EA \u05E0\u05D5\u05E1\u05E4\u05D5\u05EA"
  },
  donationLocation: {
    openingHours: "\u05E9\u05E2\u05D5\u05EA \u05E4\u05E2\u05D9\u05DC\u05D5\u05EA"
  },
  settings: {
    locale: {
      en: "\u05D0\u05E0\u05D2\u05DC\u05D9\u05EA",
      he: "\u05E2\u05D1\u05E8\u05D9\u05EA"
    }
  }
};

// src/i18n/index.ts
var locales = ["he", "en"];
var OPTIONS = {
  legacy: false,
  locale: "he",
  fallbackLocale: "en",
  availableLocales: locales,
  messages: {
    he: he_default,
    en: en_default
  }
};
var localesTranslated = {
  he: "\u05E2\u05D1\u05E8\u05D9\u05EA",
  en: "English"
};
var i18n = createI18n(OPTIONS);

// vite.config.ts
var __vite_injected_original_dirname = "/home/lab/Documents/vue-blood-donation";
var vite_config_default = defineConfig(async ({ mode }) => {
  Object.assign(
    process.env,
    loadEnv(mode, process.cwd())
  );
  let dynamicRoutes = [];
  if (mode === "production") {
    const response = await onBeforeRender().catch(console.error);
    if (response) {
      response.pageContext.pageProps.rows.forEach((row) => {
        dynamicRoutes.push(
          ...Object.keys(localesTranslated).map((locale) => `${locale}/donation-location/${row.id}`)
        );
      });
    }
  }
  return {
    buildSteps: [
      { name: "client" },
      {
        name: "server",
        config: {
          build: {
            emptyOutDir: true,
            ssr: true
          }
        }
      }
    ],
    plugins: [
      vue(),
      sitemap(
        {
          outDir: "dist/client",
          hostname: process.env.VITE_HOST_URL || "http://localhost/",
          readable: true,
          generateRobotsTxt: true,
          robots: [{
            userAgent: "*",
            disallow: "/all"
          }],
          dynamicRoutes,
          exclude: ["/all"]
        }
      ),
      vuetify(),
      vueI18nPlugin({
        ssr: true,
        include: [path2.resolve(__vite_injected_original_dirname, "./src/i18n/*.json")]
      }),
      ssr({ disableAutoFullBuild: true }),
      vavite({
        serverEntry: "/server/index.ts",
        serveClientAssetsInDev: true
      }),
      compression()
    ],
    resolve: {
      alias: {
        "@": path2.resolve(__vite_injected_original_dirname, "src")
      }
    },
    ssr: {
      noExternal: [
        "primevue",
        "@fawmi/vue-google-maps",
        "vuetify",
        "@googlemaps/markerclusterer"
      ]
    },
    optimizeDeps: {
      include: ["@fawmi/vue-google-maps", "fast-deep-equal"]
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
